@namespace(uri="http://cam.mcs.model/mcs", prefix="mcs_")
package mcs;

import "http://cam.mcs.model/base";

abstract class MCSElement extends base.ArtifactElement {
}

class MCS_system extends MCSElement {
	attr Status status;
	attr boolean print_process;
	attr boolean print_result;
	val Task[*] tasks;
	val CriticalSection[*] critical_sections;
	val Core core;
	val Parameter parameter;
	val Disturbance disturbance;
	val Result[*] results;
	val SwitchRecord[*] switchRecords;
}

class Core extends MCSElement {
	attr int time;
	attr int occupy_time;
	attr boolean error;
	ref Task current_task;
}

class Task extends MCSElement {
	attr double utilisation;
	attr int period;
	attr int deadline;
	attr int wcet_low;
	attr int wcet_high;
	attr int cstime;
	attr int priority;
	attr int dynamic_priority;
	attr int timeleft;
	attr boolean IsMandatory;
	attr Criticality criticality;
	attr WorkingState state;
	ref CriticalSection critical_section;
}

class CriticalSection extends MCSElement {
	attr int ceiling_priority;
	attr boolean locked;
	attr Criticality criticality;
	ref Task[*] tasks;
}

class Parameter extends MCSElement {
	attr int max_deadline_limit;
	attr int period_number;
	attr int task_number;
	attr float CPU_rate;
	attr float max_cstime_precent;
	attr int high_task_number;
	attr int critical_section_number;
	attr int max_deadline;
	attr int max_running_time;
	attr float high_vs_low;
	attr Status init_status;
}

class SwitchRecord extends MCSElement {
	attr int switching_time;
	attr Status source_status;
	attr Status target_status;
}

class Disturbance extends MCSElement {
	attr boolean open;
	attr int time;
}

class Result extends MCSElement {
	attr boolean no_error;
	attr float actual_occupancy_rate;
}

enum Status {
	LOW;
	MCP;
	HIGH;
}

enum Criticality {
	lo;
	hi;
}

enum WorkingState{
	unstart;
	working;
	hanging;
}