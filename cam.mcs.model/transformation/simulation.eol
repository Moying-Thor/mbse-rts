var INIT_PERIOD_CEILING = 2000;
var INIT_RELEASE_TIME = 0;
var MAX_RUNNING_TIME = 10000;
var system = new MCSystem;
var core = new Core;
init();
var taskSet = getRandomTaskSet(10, 0.5, 5);
getCriticalSection(8);
matchCriticalSection();
getCriticalSectionsCeilingPriority();
matchCriticalSectionCriticality();
run();
'run over.'.println();

operation init() {
	system.criticality = Criticality#lo;
	system.ceiling_priority = 1;
	system.status = Status#LOW;	
	core.time = 0;
	core.locked = false;
	system.core = core;
}

operation run() {
	for(i in Sequence{0..MAX_RUNNING_TIME}) {
		if (core.IsOpen() and IsNoTaskRunning() and IsUnstartedTaskExisted()){
			executeNewTask();
		}
		else if (IsTaskRunning()){
			executeCurrentTaks();
		}
		else if (IsNoTaskRunning() and core.locked and IsUnstartedTaskExisted()){
			core.releaseCurrentTask();
			executeNewTask();
		}
		else if (core.locked and IsAllTasksExecuted()){
			gameOver();
		}
		handle_LOW();
		tick();
		print_status();
	}
}

operation handle_LOW(){

}

operation matchCriticalSectionCriticality(){
	for (cs in system.critical_sections){
		for (task in cs.tasks){
		 	if (task.criticality = Criticality#hi){
		 		cs.criticality = Criticality#hi;
		 		break;
		 	}
		}
	}
}

operation getCriticalSectionsCeilingPriority(){
	for (cs in system.critical_sections){
		 for (task in cs.tasks){
		 	if (cs.tasks.count(e|e.priority > task.priority) = 0){
		 		cs.semaphore.ceiling_priority = task.priority;
		 	}
		 }
	}
}

operation matchCriticalSection(){
	for (i in Sequence{0..system.critical_sections.size()-1}){
		var cs = system.critical_sections.at(i);
		var task = taskSet.tasks.at(i);
		cs.tasks.add(task);
		task.critical_section = cs;
		cs.semaphore.acquisition.add(task);
	}
	for (task in taskSet.tasks.select(e|e.name.asInteger()>system.critical_sections.size())){
		var randomNumber = getRandomInt(system.critical_sections.size()+1);
		if (randomNumber = 0){
			task.critical_section = null;
		}
		else{
			var cs = system.critical_sections.at(randomNumber-1);
			cs.tasks.add(task);
			task.critical_section = cs;
			cs.semaphore.acquisition.add(task);
		}
	}
}

operation getCriticalSection(N : Integer){
	for (i in Sequence{1..N}){
		var sem = createSemaphore(i.asString(), false, 0, 0);
		var cs = createCriticalSection(i.asString(), 0, 0, sem);
	}
}

operation Core IsOpen(){
	if (self.locked = false){
		return true;
	}
	else{
		return false;
	}
}

operation gameOver(){
	core.locked = true;
	break;
}

operation IsAllTasksExecuted(){
	 return (taskSet.tasks.count(e|e.state = WorkingState#unstart or e.state = WorkingState#hanging) = 0);
}

operation IsUnstartedTaskExisted(){
	if(IsAllTasksExecuted()){
		return false;
	}
	else{
		return true;
	}
}

operation Core releaseCurrentTask(){
	self.current_task.state = WorkingState#done;
	core.locked = false;
	core.queue.add(self.current_task);
	core.current_task = null;
}
operation IsNoTaskRunning(){
	if (IsTaskRunning()){
		return false;
	}
	else{
		return true;
	}
}
operation IsTaskRunning(){
	if (core.current_task.isDefined()){
		return (core.current_task.timeleft > 0);
	}
	else{
		return false;
	}
}

operation executeCurrentTaks(){
	core.current_task.timeleft--;
}

operation executeNewTask() {
	var task = getTaskOfMaxPriority();
	task.state = WorkingState#working;
	core.locked = true;
	core.current_task = task;
}

operation getTaskOfMaxPriority(){
	var taskSequnece = taskSet.tasks.select(e|e.state = WorkingState#unstart or e.state = WorkingState#hanging);
	for (task in taskSequnece){
		if (taskSequnece.count(e|e.dynamic_priority > task.dynamic_priority) = 0){
			return task;
		}
	}
}

operation tick() {
	core.time += 1;
}

operation acquire_lock(task, semaphore) {
	if(sempahore.locked)
		return false;
	else {
		semaphore.locked = true;
		semaphore.acquisition.add(task);
	}
}

operation release_lock(task, semaphore) {
	if(semaphore.acquisition = task) {
		semaphore.locked = false;
		return true;
	}
	return false;
}

operation TaskSet createOneTask(i : Integer){
	var index = i.asString();
	var task = createTask(index.asString(), 1, 1, 1, 1, 1, 1, 1, 0);
	task.set_release_time(INIT_RELEASE_TIME);
	task.state = WorkingState#unstart;
	self.tasks.add(task);
	return task;
}

operation getRandomTaskSet(n : Integer, U : Real, n_hi : Integer){
	var taskSet = createTaskSet();
	var sum_u = U;
	taskSet.task_number = n;
	taskSet.u = U.asDouble();
	for (i in Sequence{1..n}) {
		var task = taskSet.createOneTask(i);
		if (i < n) {
			task.utilisation = getRemainingUtilization(sum_u, n, i);
			sum_u -= task.utilisation;
		}
		else{
			task.utilisation = sum_u;
		}
		task.period = getRandomInt(INIT_PERIOD_CEILING);
		task.computation_time = (task.period * task.utilisation).asInteger();
		task.deadline = task.period;
		task.wcet_low = task.computation_time;
		task.wcet_high = (task.computation_time * 1.5).asInteger();
//		task.critical_section.execution = task.wcet_low;
		task.timeleft = task.wcet_low;
	}
	for (task in taskSet.tasks){
		task.priority = taskSet.tasks.count(e|e.deadline > task.deadline) + 1;
		task.dynamic_priority = task.priority;
	}
	for (i in Sequence{1..n_hi}){
		while(true){
			var task = taskSet.tasks.at(getRandomInt(taskSet.tasks.size()));
			if (task.criticality = Criticality#lo){
				task.criticality = Criticality#hi;
				break;
			}
		}
	}
	return taskSet;
}

operation getRandomInt(n){
	var rand = new Native("java.util.Random");
	return rand.nextInt(n);
}

operation getRemainingUtilization(sum_u, n, i){
	var p = getRandomDecimal();
	return sum_u * (1 - p.pow(1.0/(n-i)));
}

operation getRandomDecimal(){
	var rand = new Native("java.util.Random");
	return rand.nextInt(100000).asReal()/100000;
}

operation createTaskSet(){
	var taskSet = new TaskSet;
	taskSet.task_number = 0;
	system.taskSet = taskSet;
	return taskSet;
}

operation createCriticalSection(name, start, execution, sem) {
	var cs = new CriticalSection;
	cs.name = name;
	cs.start = start; //relative start time
	cs.execution = execution; //execution time in critical section
	cs.elapsed = 0; //time elapsed in the critical section
	cs.semaphore = sem; // semaphore acquired by this critical section
	system.critical_sections.add(cs);
	return cs;
}

operation createTask(name, pri, T, d, wl, wh, l, dp, of) {
	var task = new Task;
	task.name = name;
	task.priority = pri; //priority
	task.period = T; //period
	task.deadline = d; //deadline
	task.wcet_low = wl; //wcet in low mode
	task.wcet_high = wh; //wcet in high mode
	task.dynamic_priority = dp; //dynamic priority
	task.offset = of; //initial  offset
	task.current_cs = -1; //current cs, -1 means not in critical sections, 0, 1, 2 means index of critical section
	system.tasks.add(task); //add this task to the system
	return task;
}

operation Task set_release_time(time) {
	self.release_time = time;
} 

operation createSemaphore(name, locked, initial, ceiling) {
	var sem = new Semaphore;
	sem.name = name;
	sem.locked = locked; 
	sem.initial_priority = initial;
	sem.ceiling_priority = ceiling;
	system.resources.add(sem);
	return sem;
}

operation print_status() {
	var time = core.time;
	var taskname = null;
	if(core.current_task.isDefined())
		taskname = core.current_task.name;
	var queue = core.queue.collect(n|n.name);
//	("timestampe:   " + time + "\n" + "current task: " + task + "\n" + queue + "\n").println();
	(time + '; ' + taskname + '; ' + queue).println();
}