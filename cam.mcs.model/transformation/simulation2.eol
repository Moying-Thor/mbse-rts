var MAX_RUNNING_TIME = new Integer;
var ERROR_SEQUENCE = new Sequence;
var MAX_DEADLINE = new Integer;
var PERIOD_NUMBER = 5;
var MODULE = Status#MCP;
var system = new MCSystem;
var core = new Core;
var count = 0;
initSystem();
generateTasks();
run();
finalPrint();


operation initSystem() {
	system.ceiling_priority = 5000;
	system.status = MODULE;	
	core.time = 1;
	core.locked = false;
	system.core = core;
}

operation generateTasks(){
	getRandomTasks(10, 0.4, 5);
	getCriticalSection(6);
	matchCriticalSection();
	getCriticalSectionsCeilingPriority();
	matchCriticalSectionCriticality();
	MAX_DEADLINE = getMAX_DEADLINE();
	MAX_RUNNING_TIME = MAX_DEADLINE * PERIOD_NUMBER;
}

operation run(){
	for(i in Sequence{1..MAX_RUNNING_TIME}) {
		UpdateHanging();
		handle();
		tick(i);
		counter();
		print_status();
	}
	"____________________________________".println();
	'run over.'.println();
}

operation handle(){
	if (core.IsOpen() and IsNoTaskRunning() and IsNoTaskShouldStart()){
	}
	else{
		if (core.IsOpen() and IsTaskShouldStart()){
			var task = getWillStartTask();
			task.startNewTask();
			executeCurrentTask();
		}
		else if (IsTaskRunning() and IsNoTaskShouldStart()){
			executeCurrentTask();
		}
		else if (IsTaskRunning() and IsTaskShouldStart()){
			var task = getWillStartTask();
			preempt(task);
			executeCurrentTask();
		}
		if (IsCurrentTaskOver()){
			releaseCurrentTask();
		}
		else if (IsCurrentTaskShouldHang()){
			hangCurrentTask();
		}
	}
}

operation Task lock(){
	if (self.critical_section <> null){
//		self.Locking = true;
		self.critical_section.semaphore.locked = true;
	}
}

operation Task unlock(){
	if (self.critical_section <> null){
//		self.Locking = false;
		self.critical_section.semaphore.locked = false;
	}
}

operation counter(){
	if (core.time>getMAX_DEADLINE() and core.current_task <> null){count++;}
}

operation getMAX_DEADLINE(){
	for (task in system.tasks){
		if(system.tasks.count(e|e.deadline > task.deadline)=0){
			return task.deadline;
		}
	}
}

operation Task updateDynamicPriority(){
	if (self.critical_section <> null){
		self.dynamic_priority = self.critical_section.semaphore.ceiling_priority;
		self.lock();
	}
}

operation UpdateHanging(){
	for (task in system.tasks){
		if(core.time.mod(task.period) = 0){
			if (task.state = WorkingState#unstart){
				task.state = WorkingState#hanging;
			}
			else{
				if (system.status = Status#LOW){
					task.getTimeLeft();
					task.printError();
				}
				else if(system.status = Status#MCP){
					if (task.critical_section<>null and task.criticality = Criticality#lo and task.wcet_low - task.timeleft < task.cstime){
						task.critical_section.semaphore.locked = false;
					}
//					else if (task.critical_section<>null and task.criticality = Criticality#hi and task.wcet_high - task.timeleft < task.cstime){
//						task.critical_section.semaphore.locked = false;
//						'+++++++'.println();
//					}
					task.getTimeLeft();
					if (task.criticality = Criticality#hi){
						task.printError();
					}
				}
			}
		}
	}
}

operation Task printError(){
	"ERROR!!!".println();
	ERROR_SEQUENCE.add(core.time+":"+self.name);
}

operation preempt(task){
	if (task.priority > core.current_task.dynamic_priority or task.IsMandatory){
		task.IsMandatory = false;
		core.current_task.hanging();
		task.startNewTask();
	}
}

operation Task hanging(){
	self.state = WorkingState#hanging;
}

operation Task startNewTask(){
	core.locked = true;
	core.current_task = self;
	self.state = WorkingState#working;
	self.IsMandatory = false;
	self.updateDynamicPriority();
}

operation IsCurrentTaskOver(){
	return (core.current_task.timeleft = 0);
}

operation IsTaskShouldStart(){
	if (IsNoTaskShouldStart()=false){
		return true;
	}
	else{
		return false;
	}
}

operation IsNoTaskShouldStart(){
	if (getWillStartTask()=null){
		return true;
	}
	else{
		return false;
	}
}

operation getWillStartTask(){
	var willStartTasks = system.tasks.select(e|e.state = WorkingState#hanging);
	if (willStartTasks.size()=0){
		return null;
	}
	if (system.status = Status#LOW){
		if (willStartTasks.size()=1){ 
			return willStartTasks[0];
		}
		else{
			var listTask = willStartTasks.select(s|(willStartTasks.count(e|e.dynamic_priority > s.dynamic_priority) = 0));
			if (listTask.size()=1){
				return listTask[0];
			}
			else{
				return listTask.select(e|e.dynamic_priority <> e.priority).first();
			}
		}
	}
	else if (system.status = Status#MCP){
		if (core.current_task <> null and core.current_task.criticality = Criticality#hi){
			var willStartTasksHigh = willStartTasks.select(e|e.criticality=Criticality#hi and (e.critical_section=null or e.critical_section.semaphore.locked=false));
			return willStartTasksHigh.select(s|willStartTasksHigh.count(e|e.dynamic_priority>s.dynamic_priority)=0).first();
		}
		else{
			var willStartTasksHigh = willStartTasks.select(e|e.criticality=Criticality#hi);
			if (willStartTasksHigh.size()=0){
				var listTask = willStartTasks.select(s|(willStartTasks.count(e|e.dynamic_priority > s.dynamic_priority) = 0));
				if (listTask.size()=1){
					return listTask[0];
				}
				else{
					return listTask.select(e|e.dynamic_priority <> e.priority).first();
				}
			}
			else{
				while(willStartTasksHigh.size()>=1){
					var maxTaskPriorityHigh = willStartTasksHigh.select(s|willStartTasksHigh.count(e|e.dynamic_priority>s.dynamic_priority)=0);
					if (maxTaskPriorityHigh.size() = 1){
						var task = maxTaskPriorityHigh[0];
						if (task.critical_section = null or task.critical_section.semaphore.locked = false or task.wcet_high-task.timeleft < task.cstime){
							task.IsMandatory = true;
							return task;
						}
						willStartTasksHigh.remove(task);
					}
					else{
						for (task in maxTaskPriorityHigh){
							if (task.dynamic_priority <> task.priority){
								task.IsMandatory = true;
								return task;
							}
						}
					}
				}
				var willStartTasksLow = willStartTasks.select(e|e.criticality=Criticality#lo);
				if (willStartTasksLow.size()=1){ 
					return willStartTasksLow[0];
				}
				else{
					var listTask = willStartTasksLow.select(s|(willStartTasksLow.count(e|e.dynamic_priority > s.dynamic_priority) = 0));
					if (listTask.size()=1){
						return listTask[0];
					}
					else{
						return listTask.select(e|e.dynamic_priority <> e.priority).first();
					}
				}
			}
		}
	}
}

operation IsNoTaskShouldStart(){
	var taskSequence = new Sequence;
	for (task in taskSet.tasks){}
}

operation matchCriticalSectionCriticality(){
	for (cs in system.critical_sections){
		for (task in cs.tasks){
		 	if (task.criticality = Criticality#hi){
		 		cs.criticality = Criticality#hi;
		 		break;
		 	}
		}
	}
}

operation getCriticalSectionsCeilingPriority(){
	for (cs in system.critical_sections){
		 for (task in cs.tasks){
		 	if (cs.tasks.count(e|e.priority > task.priority) = 0){
		 		cs.semaphore.ceiling_priority = task.priority;
		 	}
		 }
	}
}

operation matchCriticalSection(){
	for (i in Sequence{0..system.critical_sections.size()-1}){
		var cs = system.critical_sections.at(i);
		var task = system.tasks.at(i);
		cs.tasks.add(task);
		task.critical_section = cs;
		cs.semaphore.acquisition.add(task);
	}
	for (task in system.tasks.select(e|e.name.asInteger()>system.critical_sections.size())){
		var randomNumber = getRandomInt(system.critical_sections.size()+1);
		if (randomNumber = 0){
			task.critical_section = null;
			task.cstime = 0;
		}
		else{
			var cs = system.critical_sections.at(randomNumber-1);
			cs.tasks.add(task);
			task.critical_section = cs;
			cs.semaphore.acquisition.add(task);
		}
	}
}

operation getCriticalSection(N : Integer){
	for (i in Sequence{1..N}){
		var sem = createSemaphore(i.asString(), false, 0, 0);
		var cs = createCriticalSection(i.asString(), 0, 0, sem);
	}
}

operation Core IsOpen(){
	if (self.locked = false){
		return true;
	}
	else{
		return false;
	}
}

operation gameOver(){
	core.locked = true;
	break;
}

operation IsAllTasksExecuted(){
	 return (system.tasks.count(e|e.state = WorkingState#unstart or e.state = WorkingState#hanging) = 0);
}

operation IsUnstartedTaskExisted(){
	if(IsAllTasksExecuted()){
		return false;
	}
	else{
		return true;
	}
}

operation hangCurrentTask(){
	core.current_task.state = WorkingState#hanging;
	core.locked = false;
	core.current_task = null;
}

operation releaseCurrentTask(){
	core.current_task.state = WorkingState#unstart;
	core.current_task.getTimeLeft();
	core.locked = false;
	core.current_task = null;
}

operation IsNoTaskRunning(){
	if (IsTaskRunning()){
		return false;
	}
	else{
		return true;
	}
}

operation IsTaskRunning(){
	return (core.current_task <> null and core.current_task.timeleft > 0);
}

operation executeCurrentTask(){
	core.current_task.timeleft--;
	if (core.current_task.getTaskWCET() - core.current_task.timeleft = core.current_task.cstime){
		core.current_task.dynamic_priority = core.current_task.priority;
		core.current_task.unlock();
	}
}

operation Task getTaskWCET(){
	if (system.status = Status#LOW){
		return self.wcet_low;
	}
	else if (system.status = Status#LOW){
		return self.wcet_high;
	}
}

operation IsCurrentTaskShouldHang(){
	return (system.status = Status#MCP and core.current_task.wcet_low-core.current_task.timeleft=core.current_task.cstime and core.current_task.criticality = Criticality#lo);
}

operation getTaskOfMaxPriority(){
	var taskSequnece = system.tasks.select(e|e.state = WorkingState#unstart or e.state = WorkingState#hanging);
	for (task in taskSequnece){
		if (taskSequnece.count(e|e.dynamic_priority > task.dynamic_priority) = 0){
			return task;
		}
	}
}

operation tick(i) {
	core.time = i;
}

operation createOneTask(i : Integer){
	var index = i.asString();
	var task = createTask(index.asString(), 1, 1, 1, 1, 1, 1, 1, 0);
	task.set_release_time(0);
	task.state = WorkingState#unstart;
	system.tasks.add(task);
	return task;
}

operation getRandomTasks(n : Integer, U : Real, n_hi : Integer){
	var sum_u = U;
	for (i in Sequence{1..n}) {
		var task = createOneTask(i);
	}
	for (i in Sequence{1..n_hi}){
		while(true){
			var task = system.tasks.at(getRandomInt(system.tasks.size()));
			if (task.criticality = Criticality#lo){
				task.criticality = Criticality#hi;
				break;
			}
		}
	}
	for (i in Sequence{1..n}) {
		var task = system.tasks.at(i-1);
		while(true){
			if (i < n) {
				task.utilisation = getRemainingUtilization(sum_u, n, i);
				sum_u -= task.utilisation;
			}
			else{
				task.utilisation = sum_u;
			}
			task.period = getRandomInt(system.ceiling_priority);
			task.computation_time = (task.period * task.utilisation).getInteger();
			task.deadline = task.period;
			task.wcet_low = task.computation_time;
			task.wcet_high = (task.computation_time * 1.5).getInteger();
			task.getCstime();
			task.getTimeLeft();
			if (task.wcet_low <> 0 and task.wcet_high < task.deadline){
				break;
			}
		}
	}
	for (task in system.tasks){
		task.priority = system.tasks.count(e|e.deadline > task.deadline) + 1;
		task.dynamic_priority = task.priority;
	}
}

operation Task getTimeLeft(){
	if (system.status = Status#LOW){
		self.timeleft = self.wcet_low;
	}
	else if (system.status = Status#MCP){
		if (self.criticality = Criticality#lo){
			self.timeleft = self.wcet_low;
		}
		else if (self.criticality = Criticality#hi){
			self.timeleft = self.wcet_high;
		}
	}
}

operation Task getCstime(){
	if (system.status = Status#LOW){
		self.cstime = (self.wcet_low*0.25*getRandomDecimal()).getInteger();
	}
	else if (system.status = Status#MCP){
		if (self.criticality = Criticality#lo){
			self.cstime = (self.wcet_low*0.25*getRandomDecimal()).getInteger();
		}
		else if (self.criticality = Criticality#hi){
			self.cstime = (self.wcet_high*0.25*getRandomDecimal()).getInteger();
		}
	}
}

operation Real getInteger(){
	var selfInt = self.asInteger();
	var decimal = self - selfInt;
	if (decimal > 0.5){
		return selfInt+1;
	}
	else{
		return selfInt;
	}
}

operation getRandomInt(n){
	var rand = new Native("java.util.Random");
	return rand.nextInt(n);
}

operation getRemainingUtilization(sum_u, n, i){
	var p = getRandomDecimal();
	return sum_u * (1 - p.pow(1.0/(n-i)));
}

operation getRandomDecimal(){
	var rand = new Native("java.util.Random");
	return rand.nextInt(100000).asReal()/100000;
}

operation createCriticalSection(name, start, execution, sem) {
	var cs = new CriticalSection;
	cs.name = name;
	cs.start = start; //relative start time
	cs.execution = execution; //execution time in critical section
	cs.elapsed = 0; //time elapsed in the critical section
	cs.semaphore = sem; // semaphore acquired by this critical section
	system.critical_sections.add(cs);
	return cs;
}

operation createTask(name, pri, T, d, wl, wh, l, dp, of) {
	var task = new Task;
	task.name = name;
	task.priority = pri; //priority
	task.period = T; //period
	task.deadline = d; //deadline
	task.wcet_low = wl; //wcet in low mode
	task.wcet_high = wh; //wcet in high mode
	task.dynamic_priority = dp; //dynamic priority
	task.offset = of; //initial  offset
	task.current_cs = -1; //current cs, -1 means not in critical sections, 0, 1, 2 means index of critical section
	task.IsMandatory = false;
	system.tasks.add(task); //add this task to the system
	return task;
}

operation Task set_release_time(time) {
	self.release_time = time;
} 

operation createSemaphore(name, locked, initial, ceiling) {
	var sem = new Semaphore;
	sem.name = name;
	sem.locked = locked; 
	sem.initial_priority = initial;
	sem.ceiling_priority = ceiling;
	system.resources.add(sem);
	return sem;
}

operation print_status() {
	//if (core.time < MAX_DEADLINE){
	//	return null;
	//}
	"____________________________________".println();
	("time:"+core.time).println();
	if(core.current_task.isDefined()){
		("current_task:"+core.current_task.name+";  dynamic_priority:"+core.current_task.dynamic_priority+";  timeleft:"+core.current_task.timeleft).println();
	}
	else{
		("current_task: null").println();
	}
	var queue = system.tasks.select(e|e.state=WorkingState#hanging).collect(e|e.name);
	("Hanging queue:   "+queue).println();
	var queue = system.tasks.select(e|e.state=WorkingState#hanging).collect(e|e.priority);
	("priority:        "+queue).println();
	var queue = system.tasks.select(e|e.state=WorkingState#hanging).collect(e|e.dynamic_priority);
	("dynamic_priority:"+queue).println();  
	var queue = system.tasks.select(e|e.state=WorkingState#hanging and e.critical_section<>null).collect(e|e.critical_section.semaphore.locked);
	("semaphore_lock_status:"+queue).println();  
}
operation finalPrint(){
	("Actual occupancy rate: "+100.0*count/(MAX_RUNNING_TIME-getMAX_DEADLINE())+"%").println();
	("Error time and task:   "+ERROR_SEQUENCE).println();
}