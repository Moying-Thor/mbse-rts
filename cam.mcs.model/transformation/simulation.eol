var MAX_RUNNING_TIME = new Integer;
var ERROR_SEQUENCE = new Sequence;
var MAX_DEADLINE = new Integer;
var PERIOD_NUMBER = 5;
var TaskNumber = 6;
var CPURate = 0.5;
var HighTaskNumber = 4;
var CriticalSectionNumber = 2;
var MODULE = Status#LOW;
var systemStatusHighTime = 0;
var DisturbanceOpen = true;
var system = new MCSystem;
var core = new Core;
var count = 0;
initSystem();
generateTasks();
var DisturbanceTime = MAX_DEADLINE*3+getRandomInt(1000);
"Start...".println();
run();
finalPrint();

operation run(){
	for(i in Sequence{1..MAX_RUNNING_TIME}) {
		UpdateHanging();
		handle();
		tick(i);
		counter();
//		print_status();
	}
}

operation handle(){
	modeSwitch();
	var taskShouldStart = HasTaskShouldStart();
	if (not (core.IsOpen() and IsNoTaskRunning() and (not taskShouldStart))){
		if (core.IsOpen() and taskShouldStart){
			var task = getWillStartTask();
			task.startNewTask();
			executeCurrentTask();
		}
		else if (IsTaskRunning() and taskShouldStart){
			var task = getWillStartTask();
			preempt(task);
			executeCurrentTask();
		}
		else if (IsTaskRunning() and (not taskShouldStart)){
			executeCurrentTask();
		}
		if (IsCurrentTaskOver()){
			releaseCurrentTask();
		}
		else if (IsCurrentTaskShouldHang()){
			hangCurrentTask();
		}
	}
}

operation initSystem() {
	system.ceiling_priority = 5000;
	system.status = MODULE;
	system.core = core;
	core.time = 1;
}

operation modeSwitch(){
	if (disturbance()){
		changeSystemStatus("LOW", "MCP");
	}
	if (system.status=Status#MCP){
		changeSystemStatus("MCP", "HIGH");
	}
}

operation generateTasks(){
	getRandomTasks(TaskNumber, CPURate, HighTaskNumber);
	getCriticalSection(CriticalSectionNumber);
	matchCriticalSection();
	getCriticalSectionsCeilingPriority();
	matchCriticalSectionCriticality();
	MAX_DEADLINE = getMAX_DEADLINE();
	MAX_RUNNING_TIME = MAX_DEADLINE * PERIOD_NUMBER;
}

operation disturbance(){
	return (DisturbanceOpen and (core.time = DisturbanceTime));
}

operation changeSystemStatus(source:String, target:String){
	if (source='LOW' and target='MCP'){
		system.status = Status#MCP;
		for (task in system.tasks){
			if (task.criticality=Criticality#hi){
				task.cstime = (task.cstime * 1.5).getInteger();
				if (task.wcet_low-task.timeleft >= task.cstime and task.cstime<>0){
					task.timeleft =	(task.timeleft * 1.5).getInteger();
				}
				else {
					task.timeleft += task.wcet_high - task.wcet_low;
				}
			}
		}
	}
	else if (source='MCP' and target='HIGH'){
		if (core.isNotLowTaskRunning()){
			var HangingList = system.tasks.select(e|e.state=WorkingState#hanging);
			for (task in HangingList){
				if (not(task.timeleft=task.wcet_low or task.timeleft+task.cstime<=task.wcet_low)){
					return null;
				}
			}
			system.status = Status#HIGH;
			systemStatusHighTime = core.time;
		}
	}
}

operation Core isNotLowTaskRunning(){
	return (self.current_task=null or self.current_task.criticality<>Criticality#hi);
}

operation Task lock(){
	if (self.critical_section <> null){
		self.critical_section.locked = true;
	}
}

operation Task unlock(){
	if (self.critical_section <> null){
		self.critical_section.locked = false;
	}
}

operation counter(){
	if (core.time>getMAX_DEADLINE() and core.current_task <> null){count++;}
}

operation getMAX_DEADLINE(){
	for (task in system.tasks){
		if(system.tasks.count(e|e.deadline > task.deadline)=0){
			return task.deadline;
		}
	}
}

operation Task updateDynamicPriority(){
	if (self.critical_section <> null and core.current_task.getTaskWCET() - core.current_task.timeleft < core.current_task.cstime){
		self.dynamic_priority = self.critical_section.ceiling_priority;
		self.lock();
	}
}

operation UpdateHanging(){
	for (task in system.tasks){
		if(core.time.mod(task.period) = 0){
			if (task.state = WorkingState#unstart){
				task.state = WorkingState#hanging;
			}
			else{
				if (system.status = Status#LOW){
					task.getTimeLeft();
					task.printError();
				}
				else if(system.status = Status#MCP or system.status = Status#HIGH){
					if (task.critical_section<>null and task.criticality = Criticality#lo and task.wcet_low - task.timeleft < task.cstime){
						task.critical_section.locked = false;
					}
					task.getTimeLeft();
					if (task.criticality = Criticality#hi){
						task.printError();
					}
				}
			}
		}
	}
}

operation preempt(task){
	if ((system.status=Status#HIGH) and isDoubleLow(core.current_task, task) and (task.priority > core.current_task.dynamic_priority)){
		if (core.current_task.wcet_low-core.current_task.timeleft>=core.current_task.cstime){
			task.IsMandatory = false;
			core.current_task.hanging();
			task.startNewTask();
		}
		return null;
	}
	if ((task.IsMandatory = true) or (task.priority > core.current_task.dynamic_priority)){
		task.IsMandatory = false;
		core.current_task.hanging();
		task.startNewTask();
	}
}

operation isDoubleLow(taskC, taskNew){
	return ((taskC<>null)and(taskNew<>null)and(taskC.criticality=Criticality#lo)and(taskNew.criticality=Criticality#lo));
}

operation Task hanging(){
	self.state = WorkingState#hanging;
}

operation Task startNewTask(){
	core.current_task = self;
	self.state = WorkingState#working;
	self.IsMandatory = false;
	self.updateDynamicPriority();
}

operation IsCurrentTaskOver(){
	return (core.current_task<>null and core.current_task.timeleft = 0);
}

operation HasTaskShouldStart(){
	return (getWillStartTask()<>null);
}

operation getWillStartTask(){
	var willStartTasks = system.tasks.select(e|e.state = WorkingState#hanging);
	if (willStartTasks.size()=0){
		return null;
	}
	if (system.status = Status#LOW){
		if (willStartTasks.size()=1){ 
			return willStartTasks[0];
		}
		else{
			var willStartTask = willStartTasks.getMaxPriorityTask();
			if (willStartTask.size()=1){
				return willStartTask[0];
			}
			return willStartTask.getTaskByDPvsPi();
		}
	}
	else if (system.status = Status#MCP or system.status = Status#HIGH){
		if (core.current_task <> null and core.current_task.criticality = Criticality#hi){
			var willStartTasksHigh = willStartTasks.select(e|e.criticality=Criticality#hi and (e.critical_section=null or e.critical_section.locked=false));
			return willStartTasksHigh.getMaxPriorityTask();
		}
		else{
			var willStartTasksHigh = willStartTasks.select(e|e.criticality=Criticality#hi);
			while(willStartTasksHigh.size()>0){
				var maxTaskPriorityHigh = willStartTasksHigh.getMaxPriorityTask();
				if (maxTaskPriorityHigh.size() = 1){
					var task = maxTaskPriorityHigh[0];
					if (task.critical_section = null or task.critical_section.locked = false or task.wcet_high-task.timeleft < task.cstime){
						task.IsMandatory = true;
						return task;
					}
					willStartTasksHigh.remove(task);
				}
				else{
					var task = maxTaskPriorityHigh.getTaskByDPvsPi();
					task.IsMandatory = true;
					return task;
				}
			}
			var willStartTasksLow = willStartTasks.select(e|e.criticality=Criticality#lo);
			while(willStartTasksLow.size()>0){
				var maxTaskPriorityLow = willStartTasksLow.getMaxPriorityTask();
				if (maxTaskPriorityLow.size()=1){
					var task = maxTaskPriorityLow[0];
					if ((system.status=Status#MCP and task.wcet_low-task.timeleft<task.cstime) or (system.status=Status#HIGH and task.notAvoid() and(core.current_task =null or core.current_task.wcet_low-core.current_task.timeleft>=core.current_task.cstime))) {
						return task;
					}
					willStartTasksLow.remove(task);
				}
				else{
					return maxTaskPriorityLow.getTaskByDPvsPi();
				}
			}
			return null;
		}
	}
}

operation Any getTaskByDPvsPi(){
	return self.select(e|e.dynamic_priority <> e.priority).first();
}

operation Any getMaxPriorityTask(){
	return self.select(s|(self.count(e|e.dynamic_priority > s.dynamic_priority) = 0));
}

operation Task notAvoid(){
	return (not (self.IsHighTaskExisted() and self.shouldAvoid()));
}

operation Task shouldAvoid(){
	var start = core.time;
	var visionDistance = self.cstime;
	var HighTaskSequence = self.critical_section.tasks.select(e|e.criticality=Criticality#hi);
	while(true){
		var HighTaskCanSeen = getHighTaskInVisitionDistance(start, visionDistance);
		if (HighTaskCanSeen.size()>0){
			if (HighTaskCanSeen.includeSameCSIn(HighTaskSequence)){
				return true;
			}
			else{
				start += visionDistance;
				visionDistance = updateVisionDistance(HighTaskCanSeen);
			}
		}
		else{
			return false;
		}
	}
}

operation updateVisionDistance(HighTaskCanSeen){
	var distance = 0;
	for (task in HighTaskCanSeen){
		distance += task.wcet_high;
	}
}

operation getHighTaskInVisitionDistance(start, visionDistance){
	var highTasksSequence = new Sequence;
	for (task in system.tasks.select(e|e.criticality=Criticality#hi and e.state = WorkingState#unstart)){
		if ((start/task.deadline).asInteger()<>((start + visionDistance).asReal()/task.deadline).asInteger()){
			highTasksSequence.add(task);
		}
	}
	return highTasksSequence;
}

operation Any includeSameCSIn(HighTaskSequence){
	for (task in self){
		if (HighTaskSequence.includes(task)){
			return true;
		}
	}
	return false;
}

operation Task IsHighTaskExisted(){
	return (self.critical_section <> null and self.critical_section.criticality = Criticality#hi);
}

operation matchCriticalSectionCriticality(){
	for (cs in system.critical_sections){
		for (task in cs.tasks){
		 	if (task.criticality = Criticality#hi){
		 		cs.criticality = Criticality#hi;
		 		break;
		 	}
		}
	}
}

operation getCriticalSectionsCeilingPriority(){
	for (cs in system.critical_sections){
		 for (task in cs.tasks){
		 	if (cs.tasks.count(e|e.priority > task.priority) = 0){
		 		cs.ceiling_priority = task.priority;
		 	}
		 }
	}
}

operation matchCriticalSection(){
	for (i in Sequence{0..system.critical_sections.size()-1}){
		var cs = system.critical_sections.at(i);
		var task = system.tasks.at(i);
		cs.tasks.add(task);
		task.critical_section = cs;
	}
	for (task in system.tasks.select(e|e.name.asInteger()>system.critical_sections.size())){
		var randomNumber = getRandomInt(system.critical_sections.size()+1);
		if (randomNumber = 0){
			task.critical_section = null;
			task.cstime = 0;
		}
		else{
			var cs = system.critical_sections.at(randomNumber-1);
			cs.tasks.add(task);
			task.critical_section = cs;
		}
	}
}

operation getCriticalSection(N : Integer){
	for (i in Sequence{1..N}){
		var cs = createCriticalSection(i.asString());
	}
}

operation Core IsOpen(){
	return (core.current_task=null);
}

operation RunOver(){
	break;
}

operation IsAllTasksExecuted(){
	return (system.tasks.count(e|e.state = WorkingState#unstart or e.state = WorkingState#hanging) = 0);
}

operation IsUnstartedTaskExisted(){
	return (not IsAllTasksExecuted());
}

operation hangCurrentTask(){
	core.current_task.state = WorkingState#hanging;
	core.current_task = null;
}

operation releaseCurrentTask(){
	core.current_task.state = WorkingState#unstart;
	core.current_task.getTimeLeft();
	core.current_task = null;
}

operation IsNoTaskRunning(){
	return (not IsTaskRunning());
}

operation IsTaskRunning(){
	return (core.current_task <> null and core.current_task.timeleft > 0);
}

operation executeCurrentTask(){
	core.current_task.timeleft--;
	if (core.current_task.getTaskWCET() - core.current_task.timeleft = core.current_task.cstime){
		core.current_task.dynamic_priority = core.current_task.priority;
		core.current_task.unlock();
	}
}

operation Task getTaskWCET(){
	if(system.status = Status#LOW or self.criticality = Criticality#lo){
		return self.wcet_low;
	}
	else{
		return self.wcet_high;
	}
}

operation IsCurrentTaskShouldHang(){
	return (core.current_task<>null and system.status = Status#MCP and core.current_task.wcet_low-core.current_task.timeleft>=core.current_task.cstime and core.current_task.criticality = Criticality#lo);
}

operation getTaskOfMaxPriority(){
	var taskSequnece = system.tasks.select(e|e.state = WorkingState#unstart or e.state = WorkingState#hanging);
	for (task in taskSequnece){
		if (taskSequnece.count(e|e.dynamic_priority > task.dynamic_priority) = 0){
			return task;
		}
	}
}

operation tick(i) {
	core.time = i;
}

operation createTask(i : Integer){
	var task = new Task;
	task.name = i.asString();
	task.IsMandatory = false;
	task.state = WorkingState#unstart;
	system.tasks.add(task);
	return task;
}

operation getRandomTasks(n : Integer, U : Real, n_hi : Integer){
	var sum_u = U;
	for (i in Sequence{1..n}) {
		createTask(i);
	}
	for (i in Sequence{1..n_hi}){
		while(true){
			var task = system.tasks.at(getRandomInt(system.tasks.size()));
			if (task.criticality = Criticality#lo){
				task.criticality = Criticality#hi;
				break;
			}
		}
	}
	for (i in Sequence{1..n}) {
		var task = system.tasks.at(i-1);
		while(true){
			if (i < n) {
				task.utilisation = getRemainingUtilization(sum_u, n, i);
				sum_u -= task.utilisation;
			}
			else{
				task.utilisation = sum_u;
			}
			task.period = getRandomIntWithFloor(system.ceiling_priority, (system.ceiling_priority*0.1).asInteger());
			task.deadline = task.period;
			task.wcet_low = (task.period * task.utilisation).getInteger();
			task.wcet_high = (task.wcet_low * 1.5).getInteger();
			task.getCstime();
			task.getTimeLeft();
			if (task.wcet_low <> 0 and task.wcet_high < task.deadline){
				break;
			}
		}
	}
	for (task in system.tasks){
		task.priority = system.tasks.count(e|e.deadline > task.deadline) + 1;
		task.dynamic_priority = task.priority;
	}
}

operation Task getTimeLeft(){
	if (system.status = Status#LOW or self.criticality = Criticality#lo){
		self.timeleft = self.wcet_low;
	}
	else{
		self.timeleft = self.wcet_high;
	}
}

operation Task getCstime(){
	if (system.status = Status#LOW or self.criticality = Criticality#lo){
		self.cstime = self.wcet_low.countCstime();
	}
	else{
		self.cstime = self.wcet_high.countCstime();
	}
}

operation Real countCstime(){
	var randomCstime = (self*0.25*getRandomDecimal()).getInteger();
	if (randomCstime <> 0){
		return randomCstime;
	}
	else{
		return 1;
	}
}

operation Real getInteger(){
	var selfInt = self.asInteger();
	var decimal = self - selfInt;
	if (decimal > 0.5){
		return selfInt+1;
	}
	else{
		return selfInt;
	}
}

operation getRandomInt(n){
	var rand = new Native("java.util.Random");
	return rand.nextInt(n);
}

operation getRandomIntWithFloor(n, floor_n){
	var number = getRandomInt(n);
	while(number <= floor_n){
		number = getRandomInt(n);
	}
	return number;
}

operation getRemainingUtilization(sum_u, n, i){
	return sum_u * (1 - getRandomDecimal().pow(1.0/(n-i)));
}

operation getRandomDecimal(){
	var rand = new Native("java.util.Random");
	return rand.nextInt(100000).asReal()/100000;
}

operation createCriticalSection(name){
	var criticalSection = new CriticalSection;
	criticalSection.name = name;
	criticalSection.locked = false;
	criticalSection.ceiling_priority = 0;
	system.critical_sections.add(criticalSection);
	return criticalSection;
}

operation Task printError(){
	"ERROR!!!".println();
	ERROR_SEQUENCE.add(core.time+":"+self.name);
}

operation print_status(){
	if (core.time < MAX_DEADLINE){
		return null;
	}
	"____________________________________".println();
	("system status:"+system.status.name).println();
	("time:"+core.time).println();
	if(core.current_task.isDefined()){
		("current_task:"+core.current_task.name+";  dynamic_priority:"+core.current_task.dynamic_priority+";  criticality:"+core.current_task.criticality.name+";  timeleft:"+core.current_task.timeleft).println();
	}
	else{
		("current_task: null").println();
	}
	var queue = system.tasks.select(e|e.state=WorkingState#hanging).collect(e|e.name);
	("Hanging queue:   "+queue).println();
	var queue = system.tasks.select(e|e.state=WorkingState#hanging).collect(e|e.priority);
	("priority:        "+queue).println();
	var queue = system.tasks.select(e|e.state=WorkingState#hanging).collect(e|e.dynamic_priority);
	("dynamic_priority:"+queue).println();  
	var queue = system.tasks.select(e|e.state=WorkingState#hanging and e.critical_section<>null).collect(e|e.critical_section.locked);
	("semaphore_lock_status:"+queue).println();  
}

operation finalPrint(){
	"____________________________________".println();
	'Run over.'.println();
	("Actual occupancy rate:   "+100.0*count/(MAX_RUNNING_TIME-getMAX_DEADLINE())+"%").println();
	("Error time and task name:"+ERROR_SEQUENCE).println();
	("LOW -> MCP core.time:    "+DisturbanceTime).println();
	("MCP -> HIGH core.time:   "+systemStatusHighTime).println();
}